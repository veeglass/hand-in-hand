{"version":3,"file":"static/js/261.5ebd72d5.chunk.js","mappings":"gVAEgBA,EAAKC,EAA4CC,EAAkBC,GACjF,OAAO,IAAIC,SAAQ,SAACC,EAASC,GACvBH,EAAQ,EACVI,YAAU,iBAAC,oGACUN,IADV,QACHO,EADG,SAECH,EAAQG,GACbA,GACHR,EAAKC,EAAUC,EAAUC,EAAQ,GAC9BM,MAAMC,SAAAA,GAEL,OADAL,EAAQK,GACDA,KAERC,OAAOC,SAAAA,GAAD,OAASN,EAAOM,MATlB,2CAURV,GAEHG,GAAQ,MAKP,IAAMQ,EAAc,mCAAG,qGAC5BC,EAAAA,EAAAA,OAAAA,QAAAA,IAAAA,EAAAA,GAAAA,EAAAA,GAA+C,CAAEZ,SAAU,IAAMC,MAAO,KAE3B,qBAAXY,UAA2B,UAAEA,OAAeC,cAAjB,QAAEC,EAAuBC,YAH1D,yCAKlBH,OAAeC,QALG,uBAOFhB,GAAK,kCAAOe,OAAeC,cAAtB,aAAOG,EAAuBD,YAAWJ,EAAQZ,SAAUY,EAAQX,OAPtE,2DAQHY,OAAeC,QARZ,gCASrB,MATqB,4CAAH,qDCQdI,EAAAA,SAAAA,I,6BAiBXC,SAAAA,IAAAA,IAAAA,GAAAA,EAAAA,EAAAA,GAAAA,KAAAA,G,IAAYP,EAAAA,UAAAA,OAAAA,QAAAA,IAAAA,UAAAA,GAAAA,UAAAA,GAAiC,GAA7CO,OACE,gB,yBAjBsBC,EAAAA,GAAAA,U,qCAE0BC,EAAAA,GAAAA,S,0CAEGC,EAAAA,GAAAA,S,yBAEdC,EAAAA,GAAAA,W,2BAEFC,EAAAA,GAAAA,Y,4BAEW,O,oCAEU,O,gCAErC,I,mCA0HG,WAClB,EAAKC,UACP,EAAKA,QAAQC,IAAI,aAAc,EAAKC,eACpC,EAAKC,YAAa,EAElB,EAAKC,OAAS,EAAKA,SAAWL,EAAAA,GAAAA,UAA2BA,EAAAA,GAAAA,MAAuBA,EAAAA,GAAAA,UAChF,EAAKM,KAAKC,EAAAA,GAAAA,kBA5HZ,EAAKC,YAAcpB,EAAQoB,aAAe,KAF5Cb,E,8CAKqB,W,MACnB,QAAU,UAAAc,KAAKR,eAAL,UAAcS,aAAeD,KAAKJ,SAAWL,EAAAA,GAAAA,a,oBAG7C,W,MACV,OAAO,UAAAS,KAAKE,uBAAL,eAAsBC,WAAY,M,IAG/B,SAACC,GACX,MAAM,IAAIC,MAAM,qB,gCAGlBC,SAAmBF,M,qDAET,WAACzB,GAAD,wEACR,+EAEKqB,KAAKD,cACRC,KAAKD,aAAcQ,EAAAA,EAAAA,IAAelB,EAAAA,GAAAA,OAAyB,QAJrD,SAMaX,EAAe,CAAEX,SAAU,IAAKC,MAAO,IANpD,UAMRgC,KAAKR,QANG,OAOHQ,KAAKR,QAPF,sBAOiBgB,EAAAA,GAAAA,eAPjB,UAQRR,KAAKE,gBAAkB,IAAIO,EAAAA,wBAAwB,CAAEC,OAAQ,CAAEX,YAAaC,KAAKD,eACjFC,KAAKJ,OAASL,EAAAA,GAAAA,MACdS,KAAKH,KAAKC,EAAAA,GAAAA,MAAsBX,EAAAA,GAAAA,SAVxB,WAaFR,EAAQgC,YAbN,wBAcJX,KAAKL,YAAa,EAdd,UAeEK,KAAKY,UAfP,2DAkBNC,IAAAA,MAAU,iDAAVA,EAAAA,IACAb,KAAKH,KAAK,UAAV,MAnBM,2D,+GAuBG,gG,EAAA,eAET,2EACAG,KAAKJ,OAASL,EAAAA,GAAAA,WACdS,KAAKH,KAAKC,EAAAA,GAAAA,WAA2B,CAAEgB,QAAS3B,EAAAA,GAAAA,UAE3Ca,KAAKR,QAND,sBAMgBgB,EAAAA,GAAAA,eANhB,UAOJR,KAAKR,QAAQS,YAPT,wBAQDc,EAAmBf,KAAKR,QAAQwB,kBAR/B,mBAUC,IAAI/C,SAAyC,SAACC,EAASC,GAC3D,IAAMyC,EAAO,mCAAG,8FACR,EAAKK,oBAAoB,EAAKzB,SADtB,OAEdtB,EAAQ,EAAKiC,UAFC,2CAAH,qDAIb,IAAK,EAAKX,QAAS,OAAOrB,EAAOqC,EAAAA,GAAAA,gBACjC,EAAKhB,QAAQ0B,KAAK,UAAWN,GAE5B,EAAKpB,QAAmCwB,kBAAoB,WAC3D7C,EAAOqC,EAAAA,GAAAA,gB,2BADwDW,EAAAA,IAAAA,MAAAA,GAAAA,EAAAA,EAAAA,EAAAA,EAAAA,IAAAA,EAAAA,GAAAA,UAAAA,GAE/D,OAAOJ,EAAiBK,MAAMC,EAAK7B,QAAS2B,IAG9C,EAAK3B,QAAQoB,UAAUpC,OAAO8C,SAAAA,GAC5BnD,EAAOmD,SAxBN,+DA4BDC,EAAAA,cAAiBC,EAAAA,IA5BhB,0CA6BCC,EAAAA,GAAAA,gBAAA,OAAkCF,EAAAA,SAAlC,IAAkCA,EAAAA,QAAlC,EAAkCA,EAAAA,GAAiBG,SA7BpD,yBA+BL1B,KAAKR,QAAQwB,kBAAoBD,EA/B5B,8DAkCDf,KAAKiB,oBAAoBjB,KAAKR,SAlC7B,WAqCJQ,KAAKR,QAAQmC,UArCT,uBAqC0BF,EAAAA,GAAAA,kBArC1B,eAsCTzB,KAAKR,QAAQoC,GAAG,aAAc5B,KAAKN,eAtC1B,kBAwCFM,KAAKG,UAxCH,wCA2CTH,KAAKJ,OAASL,EAAAA,GAAAA,MACdS,KAAKL,YAAa,EAClBK,KAAKH,KAAKC,EAAAA,GAAAA,QAAV,MA7CS,4E,iHAkDG,qGAACnB,EAAAA,EAAAA,OAAAA,QAAAA,IAAAA,EAAAA,GAAAA,EAAAA,GAAgC,CAAEkD,SAAS,GACrD7B,KAAK8B,kBADI,sBACqBL,EAAAA,GAAAA,kBAAmC,6BADxD,gCAGZ,UAAMzB,KAAKR,eAAX,aAAMuC,EAAcC,aAHR,OAIRrD,EAAQkD,UACV7B,KAAKJ,OAASL,EAAAA,GAAAA,UACdS,KAAKE,gBAAkB,KACvBF,KAAKR,QAAU,MAEjBQ,KAAKH,KAAKC,EAAAA,GAAAA,cATE,kDAWZE,KAAKH,KAAKC,EAAAA,GAAAA,QAAwB2B,EAAAA,GAAAA,mBAAA,OAAqCF,EAAAA,SAArC,IAAqCA,EAAAA,QAArC,EAAqCA,EAAAA,GAAiBG,UAX5E,0D,kHAeC,iFACV1B,KAAK8B,kBADK,sBACoBL,EAAAA,GAAAA,kBAAmC,yDADvD,gCAER,IAFQ,gD,0HAKgB,WAACQ,GAAD,oEAC1BjC,KAAKE,gBADqB,sBACEuB,EAAAA,GAAAA,gBAAiC,uBADnC,uBAEzBzB,KAAKE,gBAAgBgC,cAAcD,GAFV,cAG/BjC,KAAKJ,OAASL,EAAAA,GAAAA,UACdS,KAAKH,KAAKC,EAAAA,GAAAA,UAA0B,CAAEgB,QAAS3B,EAAAA,GAAAA,QAAyBgD,YAAanC,KAAKL,aAJ3D,kBAKxBK,KAAKG,UALmB,gD,2DAjItBlB,CAAuBmD,EAAAA,K","sources":["../node_modules/@web3auth/phantom-adapter/src/utils.ts","../node_modules/@web3auth/phantom-adapter/src/phantomAdapter.ts"],"sourcesContent":["import type { IPhantomWalletProvider } from \"@web3auth/solana-provider\";\n\nexport function poll(callback: () => boolean | Promise<boolean>, interval: number, count: number): Promise<boolean> {\n  return new Promise((resolve, reject) => {\n    if (count > 0) {\n      setTimeout(async () => {\n        const done = await callback();\n        if (done) resolve(done);\n        if (!done)\n          poll(callback, interval, count - 1)\n            .then((res) => {\n              resolve(res);\n              return res;\n            })\n            .catch((err) => reject(err));\n      }, interval);\n    } else {\n      resolve(false);\n    }\n  });\n}\n\nexport const detectProvider = async (\n  options: { interval: number; count: number } = { interval: 1000, count: 3 }\n): Promise<IPhantomWalletProvider | null> => {\n  const isPhantomAvailable = typeof window !== \"undefined\" && !!(window as any).solana?.isPhantom;\n  if (isPhantomAvailable) {\n    return (window as any).solana;\n  }\n  const isAvailable = await poll(() => (window as any).solana?.isPhantom, options.interval, options.count);\n  if (isAvailable) return (window as any).solana;\n  return null;\n};\n","import {\n  ADAPTER_CATEGORY,\n  ADAPTER_CATEGORY_TYPE,\n  ADAPTER_EVENTS,\n  ADAPTER_NAMESPACES,\n  ADAPTER_STATUS,\n  ADAPTER_STATUS_TYPE,\n  AdapterInitOptions,\n  AdapterNamespaceType,\n  BaseAdapter,\n  CHAIN_NAMESPACES,\n  ChainNamespaceType,\n  CONNECTED_EVENT_DATA,\n  CustomChainConfig,\n  getChainConfig,\n  SafeEventEmitterProvider,\n  UserInfo,\n  WALLET_ADAPTERS,\n  WalletInitializationError,\n  WalletLoginError,\n  Web3AuthError,\n} from \"@web3auth/base\";\nimport { IPhantomWalletProvider, PhantomInjectedProvider } from \"@web3auth/solana-provider\";\nimport log from \"loglevel\";\n\nimport { detectProvider } from \"./utils\";\nexport interface PhantomAdapterOptions {\n  chainConfig?: CustomChainConfig;\n}\n\nexport class PhantomAdapter extends BaseAdapter<void> {\n  readonly name: string = WALLET_ADAPTERS.PHANTOM;\n\n  readonly adapterNamespace: AdapterNamespaceType = ADAPTER_NAMESPACES.SOLANA;\n\n  readonly currentChainNamespace: ChainNamespaceType = CHAIN_NAMESPACES.SOLANA;\n\n  readonly type: ADAPTER_CATEGORY_TYPE = ADAPTER_CATEGORY.EXTERNAL;\n\n  public status: ADAPTER_STATUS_TYPE = ADAPTER_STATUS.NOT_READY;\n\n  public _wallet: IPhantomWalletProvider | null = null;\n\n  private phantomProvider: PhantomInjectedProvider | null = null;\n\n  private rehydrated = false;\n\n  constructor(options: PhantomAdapterOptions = {}) {\n    super();\n    this.chainConfig = options.chainConfig || null;\n  }\n\n  get isWalletConnected(): boolean {\n    return !!(this._wallet?.isConnected && this.status === ADAPTER_STATUS.CONNECTED);\n  }\n\n  get provider(): SafeEventEmitterProvider | null {\n    return this.phantomProvider?.provider || null;\n  }\n\n  set provider(_: SafeEventEmitterProvider | null) {\n    throw new Error(\"Not implemented\");\n  }\n\n  setAdapterSettings(_: unknown): void {}\n\n  async init(options: AdapterInitOptions): Promise<void> {\n    super.checkInitializationRequirements();\n    // set chainConfig for mainnet by default if not set\n    if (!this.chainConfig) {\n      this.chainConfig = getChainConfig(CHAIN_NAMESPACES.SOLANA, \"0x1\");\n    }\n    this._wallet = await detectProvider({ interval: 500, count: 3 });\n    if (!this._wallet) throw WalletInitializationError.notInstalled();\n    this.phantomProvider = new PhantomInjectedProvider({ config: { chainConfig: this.chainConfig as CustomChainConfig } });\n    this.status = ADAPTER_STATUS.READY;\n    this.emit(ADAPTER_EVENTS.READY, WALLET_ADAPTERS.PHANTOM);\n\n    try {\n      if (options.autoConnect) {\n        this.rehydrated = true;\n        await this.connect();\n      }\n    } catch (error) {\n      log.error(\"Failed to connect with cached phantom provider\", error);\n      this.emit(\"ERRORED\", error);\n    }\n  }\n\n  async connect(): Promise<SafeEventEmitterProvider | null> {\n    try {\n      super.checkConnectionRequirements();\n      this.status = ADAPTER_STATUS.CONNECTING;\n      this.emit(ADAPTER_EVENTS.CONNECTING, { adapter: WALLET_ADAPTERS.PHANTOM });\n\n      if (!this._wallet) throw WalletInitializationError.notInstalled();\n      if (!this._wallet.isConnected) {\n        const handleDisconnect = this._wallet._handleDisconnect;\n        try {\n          await new Promise<SafeEventEmitterProvider | null>((resolve, reject) => {\n            const connect = async () => {\n              await this.connectWithProvider(this._wallet as IPhantomWalletProvider);\n              resolve(this.provider);\n            };\n            if (!this._wallet) return reject(WalletInitializationError.notInstalled());\n            this._wallet.once(\"connect\", connect);\n            // Raise an issue on phantom that if window is closed, disconnect event is not fired\n            (this._wallet as IPhantomWalletProvider)._handleDisconnect = (...args: unknown[]) => {\n              reject(WalletInitializationError.windowClosed());\n              return handleDisconnect.apply(this._wallet, args);\n            };\n\n            this._wallet.connect().catch((reason: unknown) => {\n              reject(reason);\n            });\n          });\n        } catch (error: unknown) {\n          if (error instanceof Web3AuthError) throw error;\n          throw WalletLoginError.connectionError((error as Error)?.message);\n        } finally {\n          this._wallet._handleDisconnect = handleDisconnect;\n        }\n      } else {\n        await this.connectWithProvider(this._wallet);\n      }\n\n      if (!this._wallet.publicKey) throw WalletLoginError.connectionError();\n      this._wallet.on(\"disconnect\", this._onDisconnect);\n\n      return this.provider;\n    } catch (error: unknown) {\n      // ready again to be connected\n      this.status = ADAPTER_STATUS.READY;\n      this.rehydrated = false;\n      this.emit(ADAPTER_EVENTS.ERRORED, error);\n      throw error;\n    }\n  }\n\n  async disconnect(options: { cleanup: boolean } = { cleanup: false }): Promise<void> {\n    if (!this.isWalletConnected) throw WalletLoginError.notConnectedError(\"Not connected with wallet\");\n    try {\n      await this._wallet?.disconnect();\n      if (options.cleanup) {\n        this.status = ADAPTER_STATUS.NOT_READY;\n        this.phantomProvider = null;\n        this._wallet = null;\n      }\n      this.emit(ADAPTER_EVENTS.DISCONNECTED);\n    } catch (error: unknown) {\n      this.emit(ADAPTER_EVENTS.ERRORED, WalletLoginError.disconnectionError((error as Error)?.message));\n    }\n  }\n\n  async getUserInfo(): Promise<Partial<UserInfo>> {\n    if (!this.isWalletConnected) throw WalletLoginError.notConnectedError(\"Not connected with wallet, Please login/connect first\");\n    return {};\n  }\n\n  private async connectWithProvider(injectedProvider: IPhantomWalletProvider): Promise<SafeEventEmitterProvider | null> {\n    if (!this.phantomProvider) throw WalletLoginError.connectionError(\"No phantom provider\");\n    await this.phantomProvider.setupProvider(injectedProvider);\n    this.status = ADAPTER_STATUS.CONNECTED;\n    this.emit(ADAPTER_EVENTS.CONNECTED, { adapter: WALLET_ADAPTERS.PHANTOM, reconnected: this.rehydrated } as CONNECTED_EVENT_DATA);\n    return this.provider;\n  }\n\n  private _onDisconnect = () => {\n    if (this._wallet) {\n      this._wallet.off(\"disconnect\", this._onDisconnect);\n      this.rehydrated = false;\n      // ready to be connected again only if it was previously connected and not cleaned up\n      this.status = this.status === ADAPTER_STATUS.CONNECTED ? ADAPTER_STATUS.READY : ADAPTER_STATUS.NOT_READY;\n      this.emit(ADAPTER_EVENTS.DISCONNECTED);\n    }\n  };\n}\n"],"names":["poll","callback","interval","count","Promise","resolve","reject","setTimeout","done","then","res","catch","err","detectProvider","options","window","solana","_window$solana","isPhantom","_window$solana2","PhantomAdapter","constructor","WALLET_ADAPTERS","ADAPTER_NAMESPACES","CHAIN_NAMESPACES","ADAPTER_CATEGORY","ADAPTER_STATUS","_wallet","off","_onDisconnect","rehydrated","status","emit","ADAPTER_EVENTS","chainConfig","this","isConnected","phantomProvider","provider","_","Error","setAdapterSettings","getChainConfig","WalletInitializationError","PhantomInjectedProvider","config","autoConnect","connect","log","adapter","handleDisconnect","_handleDisconnect","connectWithProvider","once","args","apply","_this","reason","error","Web3AuthError","WalletLoginError","message","publicKey","on","cleanup","isWalletConnected","_this$_wallet2","disconnect","injectedProvider","setupProvider","reconnected","BaseAdapter"],"sourceRoot":""}