{"version":3,"file":"static/js/269.0c4377bd.chunk.js","mappings":"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","sources":["../node_modules/@web3auth/wallet-connect-v1-adapter/src/walletConnectV1adapter.ts"],"sourcesContent":["import WalletConnect from \"@walletconnect/client\";\nimport {\n  ADAPTER_CATEGORY,\n  ADAPTER_CATEGORY_TYPE,\n  ADAPTER_EVENTS,\n  ADAPTER_NAMESPACES,\n  ADAPTER_STATUS,\n  ADAPTER_STATUS_TYPE,\n  AdapterNamespaceType,\n  BaseAdapter,\n  CHAIN_NAMESPACES,\n  ChainNamespaceType,\n  CONNECTED_EVENT_DATA,\n  CustomChainConfig,\n  getChainConfig,\n  isHexStrict,\n  SafeEventEmitterProvider,\n  UserInfo,\n  WALLET_ADAPTERS,\n  WalletConnectV1Data,\n  WalletInitializationError,\n  WalletLoginError,\n  Web3AuthError,\n} from \"@web3auth/base\";\nimport { WalletConnectProvider } from \"@web3auth/ethereum-provider\";\nimport log from \"loglevel\";\n\nimport { WalletConnectV1AdapterOptions } from \"./interface\";\n\nclass WalletConnectV1Adapter extends BaseAdapter<void> {\n  readonly name: string = WALLET_ADAPTERS.WALLET_CONNECT_V1;\n\n  readonly adapterNamespace: AdapterNamespaceType = ADAPTER_NAMESPACES.EIP155;\n\n  readonly currentChainNamespace: ChainNamespaceType = CHAIN_NAMESPACES.EIP155;\n\n  readonly type: ADAPTER_CATEGORY_TYPE = ADAPTER_CATEGORY.EXTERNAL;\n\n  readonly adapterOptions: WalletConnectV1AdapterOptions;\n\n  public status: ADAPTER_STATUS_TYPE = ADAPTER_STATUS.NOT_READY;\n\n  public adapterData: WalletConnectV1Data = {\n    uri: \"\",\n  };\n\n  public connector: WalletConnect | null = null;\n\n  private wcProvider: WalletConnectProvider | null = null;\n\n  private rehydrated = false;\n\n  constructor(options: WalletConnectV1AdapterOptions = {}) {\n    super();\n    this.adapterOptions = { ...options };\n    this.chainConfig = options.chainConfig || null;\n  }\n\n  get connected(): boolean {\n    return !!this.connector?.connected;\n  }\n\n  get provider(): SafeEventEmitterProvider | null {\n    return this.wcProvider?.provider || null;\n  }\n\n  set provider(_: SafeEventEmitterProvider | null) {\n    throw new Error(\"Not implemented\");\n  }\n\n  async init(): Promise<void> {\n    super.checkInitializationRequirements();\n    if (!this.chainConfig) {\n      this.chainConfig = getChainConfig(CHAIN_NAMESPACES.EIP155, 1);\n    }\n    // Create a connector\n    this.connector = this.getWalletConnectInstance();\n    this.wcProvider = new WalletConnectProvider({ config: { chainConfig: this.chainConfig as CustomChainConfig } });\n\n    this.emit(ADAPTER_EVENTS.READY, WALLET_ADAPTERS.WALLET_CONNECT_V1);\n    this.status = ADAPTER_STATUS.READY;\n    if (this.connector.connected) {\n      this.rehydrated = true;\n      await this.onConnectHandler({ accounts: this.connector.accounts, chainId: this.connector.chainId.toString() });\n    }\n  }\n\n  async connect(): Promise<SafeEventEmitterProvider | null> {\n    super.checkConnectionRequirements();\n    if (!this.connector) throw WalletInitializationError.notReady(\"Wallet adapter is not ready yet\");\n\n    if (this.connected) {\n      await this.onConnectHandler({ accounts: this.connector.accounts, chainId: this.connector.chainId.toString() });\n      return this.provider;\n    }\n\n    if (this.status !== ADAPTER_STATUS.CONNECTING) {\n      // for wallet connect qr code modal we have to create a new connector, coz wallet connect internally does not open\n      // modal again on existing instance if connection is pending.\n      if (this.adapterOptions.adapterSettings?.qrcodeModal) {\n        this.connector = this.getWalletConnectInstance();\n      }\n      await this.createNewSession();\n      this.status = ADAPTER_STATUS.CONNECTING;\n      this.emit(ADAPTER_EVENTS.CONNECTING, { adapter: WALLET_ADAPTERS.WALLET_CONNECT_V1 });\n    }\n    return new Promise((resolve, reject) => {\n      if (!this.connector) return reject(WalletInitializationError.notReady(\"Wallet adapter is not ready yet\"));\n      // for wallet connect default modal.\n      this.connector.on(\"modal_closed\", async () => {\n        this.status = ADAPTER_STATUS.READY;\n        this.emit(ADAPTER_EVENTS.READY, WALLET_ADAPTERS.WALLET_CONNECT_V1);\n        return reject(new Error(\"User closed modal\"));\n      });\n      try {\n        // Subscribe to session connection\n        this.connector.on(\"connect\", async (error: Error | null, payload: { params: { accounts: string[]; chainId: string }[] }) => {\n          if (error) {\n            this.emit(ADAPTER_EVENTS.ERRORED, error);\n          }\n          await this.onConnectHandler(payload.params[0]);\n          return resolve(this.provider);\n        });\n      } catch (error: unknown) {\n        log.error(\"Wallet connect v1 adapter error while connecting\", error);\n        // ready again to be connected\n        this.status = ADAPTER_STATUS.READY;\n        this.rehydrated = true;\n        this.emit(ADAPTER_EVENTS.ERRORED, error);\n        reject(\n          error instanceof Web3AuthError\n            ? error\n            : WalletLoginError.connectionError(`Failed to login with wallet connect: ${(error as Error)?.message || \"\"}`)\n        );\n      }\n    });\n  }\n\n  async getUserInfo(): Promise<Partial<UserInfo>> {\n    if (!this.connected) throw WalletLoginError.notConnectedError(\"Not connected with wallet, Please login/connect first\");\n    return {};\n  }\n\n  async disconnect(options: { cleanup: boolean } = { cleanup: false }): Promise<void> {\n    const { cleanup } = options;\n    if (!this.connector || !this.connected) throw WalletLoginError.notConnectedError(\"Not connected with wallet\");\n    await this.connector.killSession();\n    this.rehydrated = false;\n    if (cleanup) {\n      this.connector = null;\n      this.status = ADAPTER_STATUS.NOT_READY;\n      this.wcProvider = null;\n    } else {\n      // ready to connect again\n      this.status = ADAPTER_STATUS.READY;\n    }\n    this.emit(ADAPTER_EVENTS.DISCONNECTED);\n  }\n\n  private async createNewSession(opts: { forceNewSession: boolean } = { forceNewSession: false }): Promise<void> {\n    if (!this.connector) throw WalletInitializationError.notReady(\"Wallet adapter is not ready yet\");\n    if (opts.forceNewSession && this.connector.pending) {\n      await this.connector.killSession();\n    }\n    // for wallet connect qr modal\n    if (this.adapterOptions?.adapterSettings?.qrcodeModal) {\n      await this.connector.createSession({ chainId: parseInt(this.chainConfig?.chainId || \"0x1\", 16) });\n      return;\n    }\n\n    // for web3auth qr code modal\n    return new Promise<void>((resolve, reject) => {\n      if (!this.connector) return reject(WalletInitializationError.notReady(\"Wallet adapter is not ready yet\"));\n      log.debug(\"creating new session for web3auth wallet connect\");\n      this.connector.on(\"display_uri\", async (err, payload) => {\n        if (err) {\n          this.emit(ADAPTER_EVENTS.ERRORED, WalletLoginError.connectionError(\"Failed to display wallet connect qr code\"));\n          return reject(err);\n        }\n        const uri = payload.params[0];\n        this.updateAdapterData({ uri } as WalletConnectV1Data);\n\n        this.connector?.off(\"display_uri\");\n        return resolve();\n      });\n\n      this.connector.createSession({ chainId: parseInt(this.chainConfig?.chainId || \"0x1\", 16) }).catch((error) => {\n        log.error(\"error while creating new wallet connect session\", error);\n        this.emit(ADAPTER_EVENTS.ERRORED, error);\n        return reject(error);\n      });\n    });\n  }\n\n  private async onConnectHandler(params: { accounts: string[]; chainId: string }) {\n    if (!this.connector || !this.wcProvider) throw WalletInitializationError.notReady(\"Wallet adapter is not ready yet\");\n    if (!this.chainConfig) throw WalletInitializationError.invalidParams(\"Chain config is not set\");\n\n    const { chainId } = params;\n    log.debug(\"connected chainId\", chainId);\n    const connectedChainId = parseInt(chainId, isHexStrict(chainId) ? 16 : 10);\n    if (connectedChainId !== parseInt(this.chainConfig.chainId, 16)) {\n      // we need to create a new session since old session is already used and\n      // user needs to login again with correct chain with new qr code.\n      await this.createNewSession({ forceNewSession: true });\n      this.emit(\n        ADAPTER_EVENTS.ERRORED,\n        WalletInitializationError.fromCode(\n          5000,\n          `Not connected to correct chainId. Expected: ${this.chainConfig.chainId}, Current: ${connectedChainId}, Please switch to correct chain from wallet`\n        )\n      );\n      return;\n    }\n    await this.wcProvider.setupProvider(this.connector);\n    this.subscribeEvents(this.connector);\n    this.status = ADAPTER_STATUS.CONNECTED;\n    this.emit(ADAPTER_EVENTS.CONNECTED, { adapter: WALLET_ADAPTERS.WALLET_CONNECT_V1, reconnected: this.rehydrated } as CONNECTED_EVENT_DATA);\n  }\n\n  private subscribeEvents(connector: WalletConnect): void {\n    connector.on(\"session_update\", async (error: Error | null) => {\n      if (error) {\n        this.emit(ADAPTER_EVENTS.ERRORED, error);\n      }\n    });\n  }\n\n  private getWalletConnectInstance(): WalletConnect {\n    const walletConnectOptions = this.adapterOptions.adapterSettings || {};\n    walletConnectOptions.bridge = walletConnectOptions.bridge || \"https://bridge.walletconnect.org\";\n    // Create a connector\n    return new WalletConnect(walletConnectOptions);\n  }\n}\n\nexport { WalletConnectV1Adapter };\n"],"names":["WalletConnectV1Adapter","constructor","options","WALLET_ADAPTERS","ADAPTER_NAMESPACES","CHAIN_NAMESPACES","ADAPTER_CATEGORY","ADAPTER_STATUS","uri","adapterOptions","chainConfig","this","connector","_this$connector","connected","wcProvider","provider","_","Error","getChainConfig","getWalletConnectInstance","WalletConnectProvider","config","emit","ADAPTER_EVENTS","status","rehydrated","onConnectHandler","accounts","chainId","toString","WalletInitializationError","adapterSettings","_this$adapterOptions$","qrcodeModal","createNewSession","adapter","Promise","resolve","reject","on","error","payload","params","log","Web3AuthError","WalletLoginError","message","cleanup","killSession","opts","forceNewSession","pending","_this$adapterOptions","_this$adapterOptions$2","createSession","parseInt","err","updateAdapterData","off","catch","connectedChainId","isHexStrict","setupProvider","subscribeEvents","reconnected","walletConnectOptions","bridge","WalletConnect","BaseAdapter"],"sourceRoot":""}