{"version":3,"file":"static/js/773.5ab8ca27.chunk.js","mappings":"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","sources":["../node_modules/@web3auth/openlogin-adapter/src/config.ts","../node_modules/@web3auth/openlogin-adapter/src/openloginAdapter.ts"],"sourcesContent":["import { OPENLOGIN_NETWORK, UX_MODE } from \"@toruslabs/openlogin\";\nimport { ChainNamespaceType, getChainConfig } from \"@web3auth/base\";\n\nimport { OpenloginAdapterOptions } from \"./interface\";\n\nexport const getOpenloginDefaultOptions = (chainNamespace?: ChainNamespaceType, chainId?: number | string): OpenloginAdapterOptions => {\n  return {\n    adapterSettings: {\n      network: OPENLOGIN_NETWORK.MAINNET,\n      clientId: \"\",\n      uxMode: UX_MODE.POPUP,\n    },\n    chainConfig: chainNamespace ? getChainConfig(chainNamespace, chainId) : undefined,\n    loginSettings: {\n      relogin: true,\n    },\n  };\n};\n","import OpenLogin, { getHashQueryParams, OPENLOGIN_NETWORK, OpenLoginOptions } from \"@toruslabs/openlogin\";\nimport {\n  ADAPTER_CATEGORY,\n  ADAPTER_CATEGORY_TYPE,\n  ADAPTER_EVENTS,\n  ADAPTER_NAMESPACES,\n  ADAPTER_STATUS,\n  ADAPTER_STATUS_TYPE,\n  AdapterInitOptions,\n  AdapterNamespaceType,\n  BaseAdapter,\n  CHAIN_NAMESPACES,\n  ChainNamespaceType,\n  CONNECTED_EVENT_DATA,\n  CustomChainConfig,\n  SafeEventEmitterProvider,\n  UserInfo,\n  WALLET_ADAPTERS,\n  WalletInitializationError,\n  WalletLoginError,\n} from \"@web3auth/base\";\nimport { BaseProvider, BaseProviderConfig, BaseProviderState } from \"@web3auth/base-provider\";\nimport merge from \"lodash.merge\";\nimport log from \"loglevel\";\n\nimport { getOpenloginDefaultOptions } from \"./config\";\nimport type { LoginSettings, OpenloginAdapterOptions } from \"./interface\";\n\nexport interface OpenloginLoginParams {\n  login_hint: string;\n  loginProvider: string;\n}\n\ntype PrivateKeyProvider = BaseProvider<BaseProviderConfig, BaseProviderState, string>;\n\nexport class OpenloginAdapter extends BaseAdapter<OpenloginLoginParams> {\n  readonly name: string = WALLET_ADAPTERS.OPENLOGIN;\n\n  readonly adapterNamespace: AdapterNamespaceType = ADAPTER_NAMESPACES.MULTICHAIN;\n\n  readonly type: ADAPTER_CATEGORY_TYPE = ADAPTER_CATEGORY.IN_APP;\n\n  public openloginInstance: OpenLogin | null = null;\n\n  public status: ADAPTER_STATUS_TYPE = ADAPTER_STATUS.NOT_READY;\n\n  public currentChainNamespace: ChainNamespaceType = CHAIN_NAMESPACES.EIP155;\n\n  private openloginOptions: OpenLoginOptions;\n\n  private loginSettings: LoginSettings = {};\n\n  private privKeyProvider: PrivateKeyProvider | null = null;\n\n  constructor(params: OpenloginAdapterOptions) {\n    super();\n    log.debug(\"const openlogin adapter\", params);\n    const defaultOptions = getOpenloginDefaultOptions(params.chainConfig?.chainNamespace, params.chainConfig?.chainId);\n    this.openloginOptions = {\n      clientId: \"\",\n      network: OPENLOGIN_NETWORK.MAINNET,\n      ...defaultOptions.adapterSettings,\n      ...(params.adapterSettings || {}),\n    };\n    this.loginSettings = { ...defaultOptions.loginSettings, ...params.loginSettings };\n    // if no chainNamespace is passed then chain config should be set before calling init\n    if (params.chainConfig?.chainNamespace) {\n      this.currentChainNamespace = params.chainConfig?.chainNamespace;\n      const defaultChainIdConfig = defaultOptions.chainConfig ? defaultOptions.chainConfig : {};\n      this.chainConfig = { ...defaultChainIdConfig, ...params?.chainConfig };\n      log.debug(\"const openlogin chainConfig\", this.chainConfig);\n      if (!this.chainConfig.rpcTarget) {\n        throw WalletInitializationError.invalidParams(\"rpcTarget is required in chainConfig\");\n      }\n    }\n  }\n\n  get chainConfigProxy(): CustomChainConfig | null {\n    return this.chainConfig ? { ...this.chainConfig } : null;\n  }\n\n  get provider(): SafeEventEmitterProvider | null {\n    return this.privKeyProvider?.provider || null;\n  }\n\n  set provider(_: SafeEventEmitterProvider | null) {\n    throw new Error(\"Not implemented\");\n  }\n\n  async init(options: AdapterInitOptions): Promise<void> {\n    super.checkInitializationRequirements();\n    if (!this.openloginOptions?.clientId) throw WalletInitializationError.invalidParams(\"clientId is required before openlogin's initialization\");\n    if (!this.chainConfig) throw WalletInitializationError.invalidParams(\"chainConfig is required before initialization\");\n    this.openloginInstance = new OpenLogin(this.openloginOptions);\n    const redirectResult = getHashQueryParams();\n    let isRedirectResult = true;\n    if (Object.keys(redirectResult).length > 0 && redirectResult.result) {\n      isRedirectResult = true;\n    }\n    await this.openloginInstance.init();\n\n    this.status = ADAPTER_STATUS.READY;\n    this.emit(ADAPTER_EVENTS.READY, WALLET_ADAPTERS.OPENLOGIN);\n\n    try {\n      // connect only if it is redirect result or if connect (adapter is cached/already connected in same session) is true\n      if (this.openloginInstance.privKey && (options.autoConnect || isRedirectResult)) {\n        await this.connect();\n      }\n    } catch (error) {\n      log.error(\"Failed to connect with cached openlogin provider\", error);\n      this.emit(\"ERRORED\", error);\n    }\n  }\n\n  async connect(params?: OpenloginLoginParams): Promise<SafeEventEmitterProvider | null> {\n    super.checkConnectionRequirements();\n    this.status = ADAPTER_STATUS.CONNECTING;\n    this.emit(ADAPTER_EVENTS.CONNECTING, { ...params, adapter: WALLET_ADAPTERS.OPENLOGIN });\n    try {\n      await this.connectWithProvider(params);\n      return this.provider;\n    } catch (error: unknown) {\n      log.error(\"Failed to connect with openlogin provider\", error);\n      // ready again to be connected\n      this.status = ADAPTER_STATUS.READY;\n      this.emit(ADAPTER_EVENTS.ERRORED, error);\n      if ((error as Error)?.message.includes(\"user closed popup\")) {\n        throw WalletLoginError.popupClosed();\n      }\n      throw WalletLoginError.connectionError(\"Failed to login with openlogin\");\n    }\n  }\n\n  async disconnect(options: { cleanup: boolean } = { cleanup: false }): Promise<void> {\n    if (this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.notConnectedError(\"Not connected with wallet\");\n    if (!this.openloginInstance) throw WalletInitializationError.notReady(\"openloginInstance is not ready\");\n    await this.openloginInstance.logout();\n    if (options.cleanup) {\n      this.status = ADAPTER_STATUS.NOT_READY;\n      this.openloginInstance = null;\n      this.privKeyProvider = null;\n    } else {\n      // ready to be connected again\n      this.status = ADAPTER_STATUS.READY;\n    }\n\n    this.emit(ADAPTER_EVENTS.DISCONNECTED);\n  }\n\n  async getUserInfo(): Promise<Partial<UserInfo>> {\n    if (this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.notConnectedError(\"Not connected with wallet\");\n    if (!this.openloginInstance) throw WalletInitializationError.notReady(\"openloginInstance is not ready\");\n    const userInfo = await this.openloginInstance.getUserInfo();\n    return userInfo;\n  }\n\n  // should be called only before initialization.\n  setAdapterSettings(adapterSettings: OpenLoginOptions): void {\n    if (this.status === ADAPTER_STATUS.READY) return;\n    const defaultOptions = getOpenloginDefaultOptions();\n    this.openloginOptions = { ...defaultOptions.adapterSettings, ...(this.openloginOptions || {}), ...adapterSettings };\n  }\n\n  // should be called only before initialization.\n  setChainConfig(customChainConfig: CustomChainConfig): void {\n    super.setChainConfig(customChainConfig);\n    this.currentChainNamespace = customChainConfig.chainNamespace;\n  }\n\n  private async connectWithProvider(params?: OpenloginLoginParams): Promise<void> {\n    if (!this.chainConfig) throw WalletInitializationError.invalidParams(\"chainConfig is required before initialization\");\n    if (!this.openloginInstance) throw WalletInitializationError.notReady(\"openloginInstance is not ready\");\n\n    if (this.currentChainNamespace === CHAIN_NAMESPACES.SOLANA) {\n      const { SolanaPrivateKeyProvider } = await import(\"@web3auth/solana-provider\");\n      this.privKeyProvider = new SolanaPrivateKeyProvider({ config: { chainConfig: this.chainConfig } });\n    } else if (this.currentChainNamespace === CHAIN_NAMESPACES.EIP155) {\n      const { EthereumPrivateKeyProvider } = await import(\"@web3auth/ethereum-provider\");\n      this.privKeyProvider = new EthereumPrivateKeyProvider({ config: { chainConfig: this.chainConfig } });\n    } else {\n      throw new Error(`Invalid chainNamespace: ${this.currentChainNamespace} found while connecting to wallet`);\n    }\n    // if not logged in then login\n    if (!this.openloginInstance.privKey && params) {\n      await this.openloginInstance.login(\n        merge(this.loginSettings, { loginProvider: params.loginProvider }, { extraLoginOptions: { login_hint: params?.login_hint } })\n      );\n    }\n    let finalPrivKey = this.openloginInstance.privKey;\n    if (finalPrivKey) {\n      if (this.currentChainNamespace === CHAIN_NAMESPACES.SOLANA) {\n        const { getED25519Key } = await import(\"@toruslabs/openlogin-ed25519\");\n        finalPrivKey = getED25519Key(finalPrivKey).sk.toString(\"hex\");\n      }\n      await this.privKeyProvider.setupProvider(finalPrivKey);\n      this.status = ADAPTER_STATUS.CONNECTED;\n      this.emit(ADAPTER_EVENTS.CONNECTED, { adapter: WALLET_ADAPTERS.OPENLOGIN, reconnected: !params } as CONNECTED_EVENT_DATA);\n    }\n  }\n}\n"],"names":["getOpenloginDefaultOptions","chainNamespace","chainId","adapterSettings","network","OPENLOGIN_NETWORK","clientId","uxMode","UX_MODE","chainConfig","getChainConfig","undefined","loginSettings","relogin","OpenloginAdapter","constructor","params","WALLET_ADAPTERS","ADAPTER_NAMESPACES","ADAPTER_CATEGORY","ADAPTER_STATUS","CHAIN_NAMESPACES","log","defaultOptions","_params$chainConfig","_params$chainConfig2","openloginOptions","_params$chainConfig3","currentChainNamespace","_params$chainConfig4","defaultChainIdConfig","rpcTarget","WalletInitializationError","this","privKeyProvider","provider","_","Error","options","_this$openloginOption","openloginInstance","OpenLogin","redirectResult","getHashQueryParams","isRedirectResult","Object","keys","length","result","init","status","emit","ADAPTER_EVENTS","privKey","autoConnect","connect","adapter","connectWithProvider","error","message","includes","WalletLoginError","cleanup","logout","getUserInfo","userInfo","setAdapterSettings","setChainConfig","customChainConfig","SolanaPrivateKeyProvider","config","EthereumPrivateKeyProvider","login","merge","loginProvider","extraLoginOptions","login_hint","finalPrivKey","getED25519Key","sk","toString","setupProvider","reconnected","BaseAdapter"],"sourceRoot":""}