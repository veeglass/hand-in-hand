{"version":3,"file":"static/js/389.76b30a68.chunk.js","mappings":"sTAgCMA,EAAAA,SAAAA,I,6BAeJC,SAAAA,IAAAA,IAAAA,GAAAA,EAAAA,EAAAA,GAAAA,KAAAA,G,IAAYC,EAAAA,UAAAA,OAAAA,QAAAA,IAAAA,UAAAA,GAAAA,UAAAA,GAAyC,GAArDD,OACE,gB,qCAfgDE,EAAAA,GAAAA,S,0CAEGC,EAAAA,GAAAA,S,yBAEdC,EAAAA,GAAAA,W,yBAEfC,EAAAA,GAAAA,W,2BAEaC,EAAAA,GAAAA,Y,gCAEhB,I,qCAE+B,MAIlD,EAAKC,YAAcN,EAAeM,aAAe,KAFnDP,E,qCAKY,WACV,OAAIQ,KAAKC,SAAWH,EAAAA,GAAAA,WAA4BE,KAAKE,iBAC5CF,KAAKE,iBAEP,M,IAGG,SAACC,GACX,MAAM,IAAIC,MAAM,qB,qDAGR,WAACC,GAAD,wEACR,+EADQ,SAEuBC,GAAAA,CAAuB,CAAEC,gBAAgB,IAFhE,UAERP,KAAKE,iBAFG,OAGHF,KAAKE,iBAHF,sBAG0BM,EAAAA,GAAAA,aAAuC,uCAHjE,UAIRR,KAAKC,OAASH,EAAAA,GAAAA,MACdE,KAAKS,KAAKC,EAAAA,GAAAA,MAAsBb,EAAAA,GAAAA,UALxB,UAOFQ,EAAQM,YAPN,wBAQJX,KAAKY,YAAa,EARd,UASEZ,KAAKa,UATP,0DAYNb,KAAKS,KAAKC,EAAAA,GAAAA,QAAV,MAZM,0D,uFAgBVI,SAAmBX,M,wDAEN,6FACX,2EAEKH,KAAKD,cAAaC,KAAKD,aAAcgB,EAAAA,EAAAA,IAAepB,EAAAA,GAAAA,OAAyB,IAElFK,KAAKC,OAASH,EAAAA,GAAAA,WACdE,KAAKS,KAAKC,EAAAA,GAAAA,WAA2B,CAAEM,QAASnB,EAAAA,GAAAA,WAC3CG,KAAKE,iBAPC,sBAOuBe,EAAAA,GAAAA,kBAAmC,qCAP1D,gCASHjB,KAAKE,iBAAiBgB,QAAQ,CAAEC,OAAQ,wBATrC,UAUWnB,KAAKE,iBAAjBkB,UACSpB,KAAKD,YAAkCqB,QAX/C,kCAYDpB,KAAKqB,YAAYrB,KAAKD,aAZrB,WAcTC,KAAKC,OAASH,EAAAA,GAAAA,UACTE,KAAKsB,SAfD,uBAeiBL,EAAAA,GAAAA,kBAAmC,mCAfpD,eAgBTjB,KAAKsB,SAASC,KAAK,cAAc,WAE/B,EAAKC,gBAEPxB,KAAKS,KAAKC,EAAAA,GAAAA,UAA0B,CAAEM,QAASnB,EAAAA,GAAAA,SAA0B4B,YAAazB,KAAKY,aApBlF,kBAqBFZ,KAAKsB,UArBH,wCAwBTtB,KAAKC,OAASH,EAAAA,GAAAA,MACdE,KAAKY,YAAa,EAClBZ,KAAKS,KAAKC,EAAAA,GAAAA,QAAV,MACMO,EAAAA,GAAAA,gBAAiC,wCA3B9B,0D,iHA+BG,qGAACZ,EAAAA,EAAAA,OAAAA,QAAAA,IAAAA,EAAAA,GAAAA,EAAAA,GAAgC,CAAEqB,SAAS,GACtD1B,KAAKC,SAAWH,EAAAA,GAAAA,UADN,sBACsCmB,EAAAA,GAAAA,mBAAoC,6BAD1E,OAEd,UAAAjB,KAAKsB,gBAAL,SAAeK,qBACXtB,EAAQqB,SACV1B,KAAKC,OAASH,EAAAA,GAAAA,UACdE,KAAKE,iBAAmB,MAGxBF,KAAKC,OAASH,EAAAA,GAAAA,MAGhBE,KAAKY,YAAa,EAClBZ,KAAKS,KAAKC,EAAAA,GAAAA,cAZI,gD,kHAeC,iFACXV,KAAKC,SAAWH,EAAAA,GAAAA,UADL,sBACqCmB,EAAAA,GAAAA,kBAAmC,yDADxE,gCAER,IAFQ,gD,kHAKQ,WAAClB,GAAD,oEAClBC,KAAKE,iBADa,sBACWe,EAAAA,GAAAA,kBAAmC,6BAD9C,gCAGfjB,KAAKE,iBAAiBgB,QAAQ,CAClCC,OAAQ,6BACRS,OAAQ,CAAC,CAAER,QAASrB,EAAYqB,YALb,kEAS0B,OAA1CS,EAAAA,GAAiCC,KATjB,kCAUb9B,KAAKE,iBAAiBgB,QAAQ,CAClCC,OAAQ,0BACRS,OAAQ,CAAC,CAAER,QAASrB,EAAYqB,QAASW,UAAWhC,EAAYiC,YAAaC,QAAS,CAAClC,EAAYmC,eAZlF,4E,2DApGrB3C,CAAwB4C,EAAAA","sources":["../node_modules/@web3auth/metamask-adapter/src/metamaskAdapter.ts"],"sourcesContent":["import detectEthereumProvider from \"@metamask/detect-provider\";\nimport {\n  ADAPTER_CATEGORY,\n  ADAPTER_CATEGORY_TYPE,\n  ADAPTER_EVENTS,\n  ADAPTER_NAMESPACES,\n  ADAPTER_STATUS,\n  ADAPTER_STATUS_TYPE,\n  AdapterInitOptions,\n  AdapterNamespaceType,\n  BaseAdapter,\n  CHAIN_NAMESPACES,\n  ChainNamespaceType,\n  CONNECTED_EVENT_DATA,\n  CustomChainConfig,\n  getChainConfig,\n  SafeEventEmitterProvider,\n  UserInfo,\n  WALLET_ADAPTERS,\n  WalletInitializationError,\n  WalletLoginError,\n} from \"@web3auth/base\";\n\ninterface EthereumProvider extends SafeEventEmitterProvider {\n  isMetaMask?: boolean;\n  isConnected: () => boolean;\n  chainId: string;\n}\nexport interface MetamaskAdapterOptions {\n  chainConfig?: CustomChainConfig;\n}\n\nclass MetamaskAdapter extends BaseAdapter<void> {\n  readonly adapterNamespace: AdapterNamespaceType = ADAPTER_NAMESPACES.EIP155;\n\n  readonly currentChainNamespace: ChainNamespaceType = CHAIN_NAMESPACES.EIP155;\n\n  readonly type: ADAPTER_CATEGORY_TYPE = ADAPTER_CATEGORY.EXTERNAL;\n\n  readonly name: string = WALLET_ADAPTERS.METAMASK;\n\n  public status: ADAPTER_STATUS_TYPE = ADAPTER_STATUS.NOT_READY;\n\n  private rehydrated = false;\n\n  private metamaskProvider: EthereumProvider | null = null;\n\n  constructor(adapterOptions: MetamaskAdapterOptions = {}) {\n    super();\n    this.chainConfig = adapterOptions.chainConfig || null;\n  }\n\n  get provider(): SafeEventEmitterProvider | null {\n    if (this.status === ADAPTER_STATUS.CONNECTED && this.metamaskProvider) {\n      return this.metamaskProvider as SafeEventEmitterProvider;\n    }\n    return null;\n  }\n\n  set provider(_: SafeEventEmitterProvider | null) {\n    throw new Error(\"Not implemented\");\n  }\n\n  async init(options: AdapterInitOptions): Promise<void> {\n    super.checkInitializationRequirements();\n    this.metamaskProvider = (await detectEthereumProvider({ mustBeMetaMask: true })) as EthereumProvider;\n    if (!this.metamaskProvider) throw WalletInitializationError.notInstalled(\"Metamask extension is not installed\");\n    this.status = ADAPTER_STATUS.READY;\n    this.emit(ADAPTER_EVENTS.READY, WALLET_ADAPTERS.METAMASK);\n    try {\n      if (options.autoConnect) {\n        this.rehydrated = true;\n        await this.connect();\n      }\n    } catch (error) {\n      this.emit(ADAPTER_EVENTS.ERRORED, error);\n    }\n  }\n\n  setAdapterSettings(_: unknown): void {}\n\n  async connect(): Promise<SafeEventEmitterProvider | null> {\n    super.checkConnectionRequirements();\n    // set default to mainnet\n    if (!this.chainConfig) this.chainConfig = getChainConfig(CHAIN_NAMESPACES.EIP155, 1);\n\n    this.status = ADAPTER_STATUS.CONNECTING;\n    this.emit(ADAPTER_EVENTS.CONNECTING, { adapter: WALLET_ADAPTERS.METAMASK });\n    if (!this.metamaskProvider) throw WalletLoginError.notConnectedError(\"Not able to connect with metamask\");\n    try {\n      await this.metamaskProvider.request({ method: \"eth_requestAccounts\" });\n      const { chainId } = this.metamaskProvider;\n      if (chainId !== (this.chainConfig as CustomChainConfig).chainId) {\n        await this.switchChain(this.chainConfig as CustomChainConfig);\n      }\n      this.status = ADAPTER_STATUS.CONNECTED;\n      if (!this.provider) throw WalletLoginError.notConnectedError(\"Failed to connect with provider\");\n      this.provider.once(\"disconnect\", () => {\n        // ready to be connected again\n        this.disconnect();\n      });\n      this.emit(ADAPTER_EVENTS.CONNECTED, { adapter: WALLET_ADAPTERS.METAMASK, reconnected: this.rehydrated } as CONNECTED_EVENT_DATA);\n      return this.provider;\n    } catch (error) {\n      // ready again to be connected\n      this.status = ADAPTER_STATUS.READY;\n      this.rehydrated = false;\n      this.emit(ADAPTER_EVENTS.ERRORED, error);\n      throw WalletLoginError.connectionError(\"Failed to login with metamask wallet\");\n    }\n  }\n\n  async disconnect(options: { cleanup: boolean } = { cleanup: false }): Promise<void> {\n    if (this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.disconnectionError(\"Not connected with wallet\");\n    this.provider?.removeAllListeners();\n    if (options.cleanup) {\n      this.status = ADAPTER_STATUS.NOT_READY;\n      this.metamaskProvider = null;\n    } else {\n      // ready to be connected again\n      this.status = ADAPTER_STATUS.READY;\n    }\n\n    this.rehydrated = false;\n    this.emit(ADAPTER_EVENTS.DISCONNECTED);\n  }\n\n  async getUserInfo(): Promise<Partial<UserInfo>> {\n    if (this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.notConnectedError(\"Not connected with wallet, Please login/connect first\");\n    return {};\n  }\n\n  private async switchChain(chainConfig: CustomChainConfig): Promise<void> {\n    if (!this.metamaskProvider) throw WalletLoginError.notConnectedError(\"Not connected with wallet\");\n    try {\n      await this.metamaskProvider.request({\n        method: \"wallet_switchEthereumChain\",\n        params: [{ chainId: chainConfig.chainId }],\n      });\n    } catch (switchError: unknown) {\n      // This error code indicates that the chain has not been added to MetaMask.\n      if ((switchError as { code: number }).code === 4902) {\n        await this.metamaskProvider.request({\n          method: \"wallet_addEthereumChain\",\n          params: [{ chainId: chainConfig.chainId, chainName: chainConfig.displayName, rpcUrls: [chainConfig.rpcTarget] }],\n        });\n      } else {\n        throw switchError;\n      }\n    }\n  }\n}\n\nexport { MetamaskAdapter };\n"],"names":["MetamaskAdapter","constructor","adapterOptions","ADAPTER_NAMESPACES","CHAIN_NAMESPACES","ADAPTER_CATEGORY","WALLET_ADAPTERS","ADAPTER_STATUS","chainConfig","this","status","metamaskProvider","_","Error","options","detectEthereumProvider","mustBeMetaMask","WalletInitializationError","emit","ADAPTER_EVENTS","autoConnect","rehydrated","connect","setAdapterSettings","getChainConfig","adapter","WalletLoginError","request","method","chainId","switchChain","provider","once","disconnect","reconnected","cleanup","removeAllListeners","params","switchError","code","chainName","displayName","rpcUrls","rpcTarget","BaseAdapter"],"sourceRoot":""}